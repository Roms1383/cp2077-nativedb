@use 'sass:map';
@use 'sass:color';

@mixin rd-ide-typography($theme) {
  .stx {
    font-family: map.get($theme, 'family');

    &:not(h1) {
      font-size: map.get($theme, 'size');
    }
  }
}

@mixin rd-ide-background($theme, $name) {
  $light: map.get($theme, light);
  $dark: map.get($theme, dark);

  .mat-app-background {
    &.ide-#{$name}-theme {
      background-color: map.get($light, background);

      &.dark-theme {
        background-color: map.get($dark, background);

        .mat-toolbar {
          background-color: map.get($dark, toolbar);
        }
      }
    }
  }
}

@mixin rd-ide-theme($theme, $mode) {
  $colors: map.get($theme, $mode);

  ndb-title-bar {
    background-color: map.get($colors, background);
  }

  ndb-documentation {
    & p {
      border-left: 2px solid map.get($colors, documentation);
    }

    & textarea {
      font-family: map.get($theme, family)!important;
      color: map.get($colors, documentation)!important;
      caret-color: map.get($colors, documentation)!important;
    }
  }

  .stx-doc {
    color: map.get($colors, documentation);

    & mat-icon {
      color: map.get($colors, documentation);
    }
  }

  .stx-text {
    color: map.get($colors, text);
  }

  .stx-comma {
    color: map.get($colors, comma);
  }

  .stx-parenthesis {
    color: map.get($colors, parenthesis);
  }

  .stx-lang {
    color: map.get($colors, language);
  }

  .stx-function {
    color: map.get($colors, function);
  }

  .stx-arg {
    color: map.get($colors, argument);
  }

  .stx-number {
    color: map.get($colors, number);
  }

  .stx-type {
    color: map.get($colors, type);

    &.disabled {
      color: darken(map.get($colors, type), 15%);
    }

    &.skt {
      background-color: color.change(map.get($colors, type), $alpha: 0.5);
    }
  }

  .stx-primitive-type {
    color: map.get($colors, primitive-type);
  }
}
